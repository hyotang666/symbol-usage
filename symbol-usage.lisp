(defpackage :symbol-usage
  (:use :cl)
  (:import-from :type-ext #:prototype
		#:Define-simple-type)
  (:import-from :read-as-string #:Read-as-string)
  (:import-from :null-package #:Read-with-null-package #:*only-junk-p*)
  (:import-from :trestrul #:Dotree #:Nmapleaf)
  (:export
    #:analyze
    ))
(in-package :symbol-usage)

;;;; In order to debug, return value is hash-table.
(defun analyze(&optional(system :cl))
  (labels((FILE()
	    (uiop:merge-pathnames* (format nil "~(~A~)-symbol-usage"system)
				   (user-homedir-pathname)))
	  (ANALYZED(table)
	    (let((*package* (ensure-package (ENSURE-SYSTEM system))))
	      (dolist(s(target-systems system)table)
		(analyze-system s table))))
	  (ENSURE-SYSTEM(system)
	    (if(eq :cl system)
	      :cl-user
	      system))
	  (OUTPUT(table file)
	    (with-open-file(*standard-output* file
					      :direction :output
					      :if-exists :supersede
					      :if-does-not-exist :create)
	      (print-result table))
	    table)
	  )
    (OUTPUT (ANALYZED (table-of system))
	    (FILE))))

(deftype system-name()'string)
(Define-simple-type(system-names (:element-type system-name)
				 (:element-predicate stringp)))

(Prototype target-systems(keyword)system-names)
(defun target-systems(system)
  (labels((INSTALLED-SYSTEMS()
	    (DELETE-TEST(ql-dist:installed-systems(ql-dist:dist :quicklisp))))
	  (DELETE-TEST(systems &optional acc)
	    (if(endp systems)
	      acc ; ignore order.
	      (BODY(ql-dist:name(car systems))(cdr systems)acc)))
	  (BODY(system rest acc)
	    (if(TEST-SYSTEM-P system)
	      (DELETE-TEST rest acc)
	      (DELETE-TEST rest (push system acc))))
	  (TEST-SYSTEM-P(system)
	    (search "test" system))
	  )
    (if(eq :cl system)
      (INSTALLED-SYSTEMS)
      (ql:who-depends-on(asdf:coerce-name system)))))

(defun ensure-package(system)
  ;; FIXME: some system has different package-name.
  (or (find-package system)
      (find-package(car (ql:quickload system)))
      (error "Package ~S is not found.~%Typo? or system ~:*~S may have different package name." system)))

;;;; In order to debug `ANALYZE-SYSTEM` and `PRINT-RESULT`, this is global.
(defun table-of(&optional(system :cl))
  (let((table(make-hash-table :test #'eq))
       (package(ensure-package system)))
    (do-external-symbols(s package table)
      (setf(gethash s table)0))))

(Prototype analyze-system(system-name hash-table)hash-table)
(defun analyze-system(system table)
  (labels((SYSTEM-COMPONENTS(system)
	    (handler-case(asdf:required-components(asdf:find-system system))
	      ((or asdf:missing-component
		   asdf:missing-dependency)
	       (c)(ENSURE-WARN c))
	      (named-readtables:readtable-does-not-exist())
	      (error(c)(let((restart(find-restart 'skip)))
			 (if restart
			   (invoke-restart restart)
			   (ENSURE-WARN c))))))
	  (ENSURE-WARN(thing)
	    (handler-case(warn (princ-to-string thing))
	      (error() (warn (prin1-to-string thing)))))
	  (CL-SOURCE-FILE-P(component)
	    (typep component 'asdf:cl-source-file))
	  )
    (dolist(component (SYSTEM-COMPONENTS system)table)
      (when(CL-SOURCE-FILE-P component)
	(let((*only-junk-p* T))
	  (analyze-file (asdf:component-pathname component)
			table))))))

(defparameter *debug* nil)
(defparameter *verbose* nil)
(defun analyze-file(pathname table)
  (print pathname)
  (labels((READ-SEXP(sexp-notation)
	    (setf *debug* sexp-notation)
	    (handler-case(let((*read-eval* nil))
			   (let((sexp(read-from-string sexp-notation nil)))
			     #+sbcl(setf sexp (Nmapleaf (lambda(x)
							  (if(sb-int:comma-p x)
							    (sb-int:comma-expr x)
							    x))
							sexp))
			     sexp))
	      (reader-error(c)(ENSURE-CERROR c))
	      (package-error()(RE-READ sexp-notation))
	      (error(c)(format *error-output* "~A~&~S"c pathname))))
	  (ENSURE-CERROR(c)
	    (let((format-control(handler-case(format nil (princ-to-string c))
				  (error ()(prin1-to-string c)))))
	      (when *verbose*
		(cerror format-control "Treat as NIL."))))
	  (RE-READ(string)
	    (with-input-from-string(s string)
	      (handler-case(Read-with-null-package s)
		(error(c)(setf *debug* string)
		  (ENSURE-CERROR c)))))
	  (ANALYZE-SEXP(sexp)
	    ;; FIXME: Currently we never found `NIL`, because it is node.
	    (when (listp sexp)
	      (Dotree(leaf sexp)
		(when (gethash leaf table)
		  (incf (gethash leaf table))))))
	  )
    (with-open-file(s pathname :if-does-not-exist nil)
      (when s
	(loop :for sexp = (Read-as-string s nil)
	      :while sexp
	      :when (string= "" sexp)
	      :do (loop-finish)
	      :else :do (ANALYZE-SEXP (READ-SEXP sexp))))
      table)))

(defun print-result(table)
  (labels((REC(list temp rank)
	    (if(endp list) 
	      (EPILOGUE temp rank)
	      (BODY (car list)(cdr list) temp rank)))
	  (EPILOGUE(temp rank)
	    (when temp
	      (format t "~3@S | ~4@S |~{~A~^ ~}~%"
		      rank(cdar temp)(mapcar #'car temp))))
	  (BODY(first rest temp rank)
	    (if(SAME-RANK-P first (car rest))
	      (REC rest(push first temp)rank)
	      (DO-PRINT rank first temp rest)))
	  (SAME-RANK-P(cons1 cons2)
	    (eql(cdr cons1)(cdr cons2)))
	  (DO-PRINT(rank first temp rest)
	    (format t "~3@S | ~4@S |~{~A~^ ~}~%"
		    rank(cdr first)(mapcar #'car(push first temp)))
	    (when(zerop(mod rank 10))
	      (format t "~80,,,'-A~%" #\-))
	    (REC rest nil(1+ rank)))
	  (SORT-RESULT(table)
	    (sort (alexandria:hash-table-alist table) #'> :key #'cdr))
	  )
    (REC(SORT-RESULT table)nil 1)))

;;;; for dubug use
#++
(defun system-source-files(system)
  (labels((REC(components &optional acc)
	    (if(endp components)
	      acc
	      (BODY(car components)(cdr components)acc)))
	  (BODY(component rest acc)
	    (if(typep component 'asdf:cl-source-file)
	      (REC rest (push (asdf:component-pathname component)acc))
	      (REC rest acc)))
	  )
    (REC(asdf:required-components(asdf:find-system system)))))
